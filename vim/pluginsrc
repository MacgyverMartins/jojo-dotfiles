set rtp+= "~/.vim/bundle/vundle/"
call vundle#rc()
Bundle 'gmarik/vundle'

"fixesx conflict of yankstack with surround
call yankstack#setup()

"Colorthemes {{{
"Bundle 'biskark/vim-ultimate-colorscheme-utility'
Bundle 'jojoyuji/gruvbox'
Bundle 'badwolf'
Bundle 'Marslo/marslo.vim'
Bundle 'seoul256.vim'
Bundle 'altercation/vim-colors-solarized'
Bundle 'zeis/vim-kolor'
Bundle 'w0ng/vim-hybrid'
Bundle 'tomasr/molokai'
Bundle 'matthewtodd/vim-twilight'
Bundle 'chilicuil/nextCS'
"}}}
"Movements{{{
Bundle 'tpope/vim-surround'
Bundle 'goldfeld/vim-seek'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rhysd/clever-f.vim'
"}}}
"Navigation{{{
Bundle 'kien/ctrlp.vim'
Bundle 'LustyExplorer'
Bundle 'nerdtree-execute'
Bundle 'mileszs/ack.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'tyok/nerdtree-ack'
Bundle 'jojoyuji/mru.vim'
Bundle 'dterei/VimBookmarking'
Bundle 'majutsushi/tagbar'
"}}}
"Git stuff {{{
"Bundle 'mattn/gist-vim'
Bundle 'tpope/vim-fugitive'
"Bundle 'akiomik/git-gutter-vim'
"Bundle 'airblade/vim-gitgutter'
"}}}
"Indentation {{{
"Bundle 'einars/js-beautify'
Bundle 'vim-scripts/Align'
"Bundle 'junegunn/vim-easy-align'
Bundle 'Stormherz/tablify'
Bundle 'bigfish/vim-js-beautify'
Bundle 'michalliu/sourcebeautify.vim'
Bundle 'Yggdroot/indentLine'
Bundle 'jojoyuji/vim-web-indent'
Bundle 'leshill/vim-json'
"}}}
"SyntaxComplete{{{
Bundle 'scrooloose/syntastic'
Bundle 'othree/javascript-libraries-syntax.vim'
Bundle 'skammer/vim-css-color'
Bundle 'tpope/vim-haml'
Bundle 'suan/vim-instant-markdown'
Bundle 'SyntaxComplete'
Bundle 'groenewege/vim-less'
"}}}
"Pairing {{{
Bundle 'jiangmiao/auto-pairs'
"Bundle 'kurkale6ka/vim-pairs'
"}}}
"TextObjects{{{
Bundle 'kana/vim-textobj-user'
Bundle 'vim-indent-object'
Bundle 'glts/vim-textobj-comment'
Bundle 'hchbaw/textobj-motionmotion.vim'
Bundle 'jojoyuji/vim-textobj-brace'
Bundle  'argtextobj.vim'
Bundle 'kana/vim-textobj-lastpat'
"Bundle 'zhaocai/vim-textobj-function'
Bundle 'jojoyuji/vim-textobj-function'
Bundle 'Julian/vim-textobj-variable-segment'
Bundle 'kana/vim-textobj-fold'
"Bundle 'textobj-comment'
"Bundle 'Julian/vim-textobj-variable-segment'
Bundle 'datanoise/vim-textobj-quoted'
"}}}
"Utilities{{{
Bundle 'terryma/vim-multiple-cursors'
Bundle 'SirVer/ultisnips'
Bundle 'Shougo/neocomplcache.vim'
Bundle 'JazzCore/neocomplcache-ultisnips'
Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-repeat'
Bundle 'jojoyuji/vim-sparkup'
Bundle 'Valloric/MatchTagAlways'
Bundle 'tpope/vim-abolish'
Bundle 'splitjoin.vim'
Bundle 'AndrewRadev/switch.vim'
Bundle 'henrik/vim-open-url'
Bundle 'maxbrunsfeld/vim-yankstack'
Bundle 'terryma/vim-expand-region'
Bundle 'fisadev/vim-ctrlp-cmdpalette'
Bundle 'tacahiroy/ctrlp-funky'
Bundle 'caglartoklu/launchassociated.vim'
Bundle 'lfilho/cosco.vim'
Bundle 'tsaleh/vim-matchit'
Bundle 'tpope/vim-unimpaired'
Bundle 'vim-scripts/Gundo'
"Bundle 'embear/vim-localvimrc'
"Bundle 'mbbill/undotree'
"Bundle 'FredKSchott/CoVim'
"Bundle 'Valloric/YouCompleteMe'
"}}}
"useless stuff{{{
Bundle 'koron/nyancat-vim'
"}}}
"keep vim beautiful{{{
Bundle 'Lokaltog/vim-powerline'
"Bundle 'Lokaltog/powerline-fonts'
"Bundle 'bling/vim-airline'
"Bundle 'kien/rainbow_parentheses.vim'
"}}}
"Filetype Plugin{{{
Bundle 'chrisbra/csv.vim'
"}}}
"libs {{{
Bundle 'L9'
Bundle 'jsoncodecs.vim'
"}}}


"Gundo                                                                                                          Config {{{1
noremap<silent> <leader><leader>u  :GundoToggle<CR>
"}}}
"Bookmarking                                                                                                    Config {{{1
nmap <leader>mm :ToggleBookmark<cr>
nmap <leader>mn :NextBookmark<cr>
nmap <leader>mb :PreviousBookmark<cr>
let g:bookmarking_menu = 1

"}}}
"MRU                                                                                                            Config {{{1
noremap <leader>mr :MRU<cr>
let mru_max_entries = 200
let MRU_Window_Height = 15
"}}}
"MatchTagAlways                                                                                                 Config {{{1
let g:mta_filetypes = {
      \ 'html'  : 1,
      \ 'xhtml' : 1,
      \ 'xml'   : 1,
      \ 'eruby' : 1,
      \ 'jinja' : 1
      \}
"}}}
"YankStack                                                                                                      Config {{{1
if exists('g:yankstack_did_setup') 
  let g:yankstack_map_keys = 1
  nmap <c-p> <Plug>yankstack_substitute_older_paste
  nmap <c-o> <Plug>yankstack_substitute_newer_paste
  imap <c-p> <Plug>yankstack_substitute_older_paste
  imap <c-o> <Plug>yankstack_substitute_newer_paste
  "fixes conflict with surround
endif
"}}}
"ZenCoding                                                                                                      Config {{{
let g:user_zen_settings = {
      \  'php' : {
      \    'extends' : 'html',
      \    'filters' : 'c',
      \  },
      \  'xml' : {
      \    'extends' : 'html',
      \  },
      \  'haml' : {
      \    'extends' : 'html',
      \  },
      \}
let g:user_zen_expandabbr_key = '<c-e>'
let g:user_zen_leader_key = '<c-e>'
let g:use_zen_complete_tag = 1
"}}}
"NERDTree                                                                                                       Config {{{1
" my settings
map <c-tab> :NERDTreeToggle<cr>
let g:indent_guides_exclude_filetypes = ['nerdtree'] "fixes the folding issue on NERDTree
let NERDTreeShowBookmarks=1
let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1

map <silent> <leader><leader><tab>  :call rc:syncTree()<cr><space>
"map <leader>r :NERDTreeFind<cr>
"allows NERDTree to change de cur dir
let g:NERDTreeChDirMode=2
"" returns true iff is NERDTree open/active
function! rc:isNTOpen()
  return exists("t:NERDTreeBufName")
endfunction

"when the buffer is nerdtree <tab> closes it
"autocmd FileType nerdtree noremap <tab> :NERDTreeClose<cr>

"calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! rc:syncTree()
  if rc:isNTOpen() == 0
    NERDTree
  elseif &modifiable
    NERDTree %:p:h
  else
    NERDTreeToggle
  endif
endfunction
"}}}
" Fugitive                                                                                                       Config {{{1
" remove old fugitive buffers
autocmd bufreadpost fugitive://* set bufhidden=delete
let g:gitv_commitstep = 100
let g:gitv_openhorizontal = 0
highlight diffadded guifg=#00bf00
highlight diffremoved guifg=#bf0000
"fugitive mappings
nnoremap <leader>gs :Gstatus
nnoremap <leader>gc :Gcommit
nnoremap <leader>gd :Gdiff
nnoremap <leader>gb :Gblame
nnoremap <leader>gr :Gread
nnoremap <leader>gw :Gwrite
nnoremap <leader>gp :!git push
nnoremap <leader>gu :!git pull
"}}}
"LustyExplorer                                                                                                  Config {{{1
noremap <leader>b :LustyBufferExplorer<cr>
let g:LustyExplorerSuppressRubyWarning = 1
let g:LustyJugglerShowKeys = 1
"}}}
"TagBar                                                                                                         Config {{{1
nnoremap <F12> :TagbarToggle<cr>
let g:tagbar_type_css = {
      \ 'ctagstype' : 'Css',
      \ 'kinds'     : [
      \ 'c:classes',
      \ 's:selectors',
      \ 'i:identities'
      \ ]
      \ }
let g:tagbar_type_javascript = {
      \ 'ctagsbin' : 'jsctags'
      \ }
"}}}
"CtrlP                                                                                                          Config {{{1
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll|mp4|pdf|psd|plist)$',
      \ 'link': 'some_bad_symbolic_links',
      \ }

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_max_height= 15
let g:ctrlp_extensions = ['funky']
let g:ctrlp_map = '<D-p>'
"}}}
"CtrlPCmdPalette                                                                                                Config {{{1
noremap <D-P> :CtrlPCmdPalette <cr>
noremap <D-π> :CtrlPFunky <cr>
"}}}
"Syntastic                                                                                                      Config {{{1
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': ['ruby', 'php', 'javascript'],
      \ 'passive_filetypes': ['puppet', 'html'] }
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_always_populate_loc_list=1
let g:syntastic_html_tidy_ignore_errors = ['proprietary attribute "ng-controller ng-ini"']
let g:syntastic_javascript_checrers = ['jshint']
let g:syntastic_javascript_jshint_args=" --config ". g:configpath ."jshintrc"
"}}}
"SplitJoin                                                                                                      Config {{{1
noremap <space>k :SplitjoinJoin <cr>
noremap <space>j :SplitjoinSplit <cr>
"}}}
"NyanCat                                                                                                        Config {{{1
"autocmd VimEnter * :Nyancat2
noremap <F10> :Nyancat2<cr>
inoremap <F10> <esc>:Nyancat2<cr>
"}}}
"NeoComplCache                                                                                                  Config {{{1
"neoComplcach config
let s:current_file=expand("<sfile>")
let g:neocomplcache_enable_at_startup = 1
map <leader>neo <esc>:NeoComplCacheToggle<cr>
"
"Improve persistent_undorformance
let g:neocomplcache_caching_limit_file_size = 50


"let g:neocomplcache_skip_auto_completion_time = 1
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Enable heavy features.
" Use camel case completion.
"let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
"let g:neocomplcache_enable_underbar_completion = 1

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
      \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()


" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><F9> neocomplcache#cancel_popup()

"inoremap <expr><tab>  neocomplcache#close_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplcache_enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplcache_enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
"let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
" Turn off completion, it's more disruptive than helpful
function! DisableNeocomplHtml()
  if &ft ==# 'html'
    :NeoComplCacheLock
  endif
endfunction
autocmd BufEnter * call DisableNeocomplHtml()
"}}}
"UltiSnips                                                                                                      Config {{{1
"Oh man.. totally amazing this thing!
"set runtimepat+=g:configpath."vim/ultisnips_rep"
let g:UltiSnipsUsePythonVersion = 2
"let g:UltiSnipsSnippetsDir = g:configpath."vim/snippets"
let g:UltiSnipsSnippetDirectories=["snippets"]
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsDontReverseSearchPath=1
"let g:UltiSnipsDoHash=0

"mapping to allow snippet edition on the fly
noremap  <D-Bslash> :UltiSnipsEdit<cr>
"noremap   <D-Bar> :UltiSnipsAddFiletypes
"}}}
"Switch                                                                                                         Config {{{1
nnoremap - :Switch<cr>
let g:switch_custom_definitions =
      \ [
      \   ['addClass', 'removeClass'],
      \   ['GET', 'POST'] ,
      \   ['get', 'post'] ,
      \   ['left', 'right', 'center'] ,
      \   ['width', 'height'] ,
      \   ['error', 'success', 'warning'] ,
      \   ['show', 'hide'] ,
      \   ['after', 'before'] ,
      \   ['padding', 'margin'] ,
      \   ['top', 'bottom'] ,
      \   ['relative', 'absolute', 'fixed'] ,
      \   ['setTimeout', '$timeout', 'setInterval'] ,
      \   ['$scope', '$rootScope'],
      \   ['$emit', '$broadcast'],
      \   ['console.log', 'alert'],
      \   ['radio', 'checkbox'],
      \   ['push', 'unshift']
      \ ]
"}}}
"EasyMotion                                                                                                     Config {{{1
let g:EasyMotion_mapping_w = '<space>w'
let g:EasyMotion_mapping_W = '<space>W'
let g:EasyMotion_mapping_b = '<space>b'
let g:EasyMotion_mapping_B = '<space>B'
let g:EasyMotion_mapping_e = '<space>e'
let g:EasyMotion_mapping_E = '<space>E'
let g:EasyMotion_mapping_ge = '<space>ge'
let g:EasyMotion_mapping_gE = '<space>gE'
let g:EasyMotion_mapping_t = '<space>t'
let g:EasyMotion_mapping_T = '<space>T'
let g:EasyMotion_mapping_f = '<space>f'
let g:EasyMotion_mapping_F = '<space>F'

" change the default EasyMotion shading to something more readable with Solarized
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

"}}}
"Powerline                                                                                                      Config {{{1
"in order to powerline to work
let g:Powerline_symbols = 'fancy'
"}}}
" UltimateColors                                                                                                 Config {{{1

"let g:ulti_color_Add_Fav              = '<f6>'
"let g:ulti_color_Remove_Fav           = '<c-Bslash>'
"let g:ulti_color_Next_Global          = ''
"let g:ulti_color_Prev_Global          = ''
"let g:ulti_color_Next_Fav             = ''
"let g:ulti_color_Prev_Fav             = ''
"let g:ulti_color_Next_Global_Fav      = ''
"let g:ulti_color_Prev_Global_Fav      = ''
"let g:ulti_color_See_Fav              = ''
"let g:ulti_color_Font_Next_Fav        = ''
"let g:ulti_color_Font_Prev_Fav        = ''
"let g:ulti_color_Font_Next_Global_Fav = ''
"let g:ulti_color_Font_Prev_Global_Fav = ''
"let g:ulti_color_Font_Add_Fav         = ''
"let g:ulti_color_Font_Remove_Fav      = ''
"let g:ulti_color_Write_Fav            = ''
"let g:ulti_color_Load_Fav             = ''
"let g:ulti_color_verbose              = 1
"}}}
" NextColorSchemes

nnoremap <F12> :call NextCS()<CR>
nnoremap <F11> :call PreviousCS()<CR>

"}}}
"Align                                                                                                          Config {{{1

noremap <leader>t :Align
vmap <leader>t :Align
"}}}
"Tabularize                                                                                                     Config (removed){{{1
"if exists(":Tabularize")
"noremap <leader>t= :Tabularize /=<CR>
"vmap <leader>t= :Tabularize /=<CR>
"noremap <leader>t: :Tabularize /:<CR>
"vmap <leader>t: :Tabularize /:<CR>
"noremap <leader>t- :Tabularize /-<CR>
"vmap <leader>t- :Tabularize /-<CR>
"noremap <leader>t: :Tabularize /:\zs<CR>
"vmap <leader>t: :Tabularize /:\zs<CR>
"endif
"}}}
"Airline                                                                                                        Config (removed){{{1
"Vim ariline-plugin config
"let g:airline_left_sep='►'
"let g:airline_right_sep='◄'
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline_detect_iminsert=1
let g:airline_powerline_fonts = 1
"}}}

nnoremap <leader>vi :call LoadingMsg('Installing Vundle plugins...')<cr>:so $MYVIMRC<CR>:BundleInstall<CR>
nnoremap <leader>vu :call LoadingMsg("Updating Vundle plugins...")<cr>:so $MYVIMRC<CR>:BundleUpdate
nnoremap <leader>vc :call LoadingMsg("Cleaning Vundle plugins...")<cr>:so $MYVIMRC<CR>:BundleClean<cr>



" vim: ts=2 fdm=marker fdl=0 ft=vim
