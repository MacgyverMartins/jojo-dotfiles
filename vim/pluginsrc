"* VIMPLUG {{{
set nocompatible              " be iMproved, required
filetype off  
call plug#begin('~/.vim/bundle')

"Colorthemes {{{
"colorscheme manager f11 & f12
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'chilicuil/nextCS'
Plug 'jojoyuji/gruvbox'
Plug 'w0ng/vim-hybrid'
"Plug 'tomasr/molokai'
Plug 'jaywilliams/vim-vwilight'
"Plug 'reedes/vim-colors-pencil'
"Plug 'jpo/vim-railscasts-theme'

"colorthemes
nnoremap  <d-1> :colorscheme gruvbox<cr>:echo 'gruvbox'<cr>
nnoremap  <d-2> :colorscheme Tomorrow-night<cr>
"nnoremap  <d-3> :colorscheme base16-flat<cr>
"nnoremap  <d-4> :colorscheme base16-ocean<cr>
"nnoremap  <d-5> :colorscheme base16-twilight<cr>


"}}}
"Movements{{{
Plug 'tpope/vim-surround'
Plug 'rhysd/clever-f.vim'
Plug 'haya14busa/incsearch.vim'
"}}}
"Navigation{{{
Plug 'kien/ctrlp.vim'
Plug 'LustyExplorer'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'nerdtree-execute', { 'on':  'NERDTreeToggle' }
Plug 'tyok/nerdtree-ack', { 'on':  'NERDTreeToggle' }
Plug 'markgandolfo/nerdtree-wget.vim' , { 'on':  'NERDTreeToggle' } 
Plug 'mileszs/ack.vim' , { 'on':  'NERDTreeToggle' } 
"Plug 'dterei/VimBookmarking'
Plug 'MattesGroeger/vim-bookmarks'
"Plug 'myusuf3/numbers.vim'
"Plug 'majutsushi/tagbar'
"}}}
"Git stuff {{{
"Plug 'mattn/gist-vim'
Plug 'tpope/vim-fugitive'
"}}}
"Indentation {{{
Plug 'vim-scripts/Align'
Plug 'maksimr/vim-jsbeautify'
Plug 'einars/js-beautify'
Plug 'itspriddle/vim-javascript-indent'
Plug 'leshill/vim-json'
Plug 'Yggdroot/indentLine'
"}}}
"SyntaxComplete{{{
Plug 'scrooloose/syntastic', { 'do': 'npm install -g jshint jscs jsonlint'} 
Plug 'suan/vim-instant-markdown'
Plug 'SyntaxComplete'
"}}}
"Pairing {{{
"Plug 'jiangmiao/auto-pairs'
Plug 'Raimondi/delimitMate'
"}}}

"TextObjects{{{
Plug 'kana/vim-textobj-user'
Plug 'vim-indent-object'
Plug 'textobj-comment'
Plug 'hchbaw/textobj-motionmotion.vim'
Plug 'jojoyuji/vim-textobj-brace'
Plug 'argtextobj.vim'
Plug 'kana/vim-textobj-lastpat'
Plug 'beloglazov/vim-textobj-quotes'
"}}}
"Utilities{{{
Plug 'SirVer/ultisnips'
Plug 'tommcdo/vim-exchange'
Plug 'maxbrunsfeld/vim-yankstack'

Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-repeat'
Plug 'jojoyuji/vim-sparkup'
Plug 'tpope/vim-abolish'
Plug 'splitjoin.vim'
Plug 'AndrewRadev/switch.vim'
Plug 'henrik/vim-open-url'
Plug 'vim-scripts/Gundo'
Plug 'tpope/vim-unimpaired'
Plug 'fisadev/vim-ctrlp-cmdpalette'
Plug 'tacahiroy/ctrlp-funky'
Plug 'caglartoklu/launchassociated.vim'
Plug '29decibel/vim-stringify'
Plug 'editorconfig/editorconfig-vim'
"Plug 'edkolev/tmuxline.vim'
Plug 'vim-scripts/matchit.zip'

Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'
Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
Plug 'Shougo/vimproc.vim'
"Plug 'Shougo/vimshell.vim'

let g:gist_open_browser_after_post = 1
let g:gist_clip_command = 'pbcopy'


"}}}
"useless stuff{{{
"}}}
"keep vim beautiful{{{
Plug 'itchyny/lightline.vim'
Plug 'gcavallanti/vim-noscrollbar'
Plug 'edkolev/tmuxline.vim'
"}}}
"Filetype Plug{{{
Plug 'othree/javascript-libraries-syntax.vim', {'for': 'javascript' }
Plug 'jelera/vim-javascript-syntax', {'for': 'javascript'}
Plug 'pangloss/vim-javascript', {'for': 'javascript'}
Plug 'chrisbra/csv.vim'
Plug 'wavded/vim-stylus'
Plug 'evidens/vim-twig'
Plug 'tpope/vim-haml'
Plug 'groenewege/vim-less'
Plug 'othree/html5.vim'
Plug 'mustache/vim-mustache-handlebars'
"}}}
call plug#end()
filetype plugin indent on    " required

"}}}

"Sparkup                                                                                                    Config {{{1
let g:sparkupDoubleQuote = 1

"}}}
"JSBeautify                                                                                                    Config {{{1
noremap Q gg=G``zz<cr> 
autocmd FileType javascript noremap <buffer>  Q :call JsBeautify()<cr>
" for html
"autocmd FileType html noremap <buffer> Q :call HtmlBeautify()<cr>
autocmd FileType html noremap Q gg=G``zz :StripWhiteSpaces<cr> 
"nnoremap Q gg=G``zz :StripWhiteSpaces<cr>
" for css or scss
autocmd FileType css,stylus,sass noremap <buffer> Q :call CSSBeautify()<cr>


autocmd FileType javascript vnoremap <buffer>  Q :call RangeJsBeautify()<cr>
autocmd FileType html vnoremap <buffer> Q :call RangeHtmlBeautify()<cr>
autocmd FileType css,stylus,sass vnoremap <buffer> Q :call CSSBeautify()<cr>

"}}}
"Bookmarking                                                                                                    Config {{{1 "nmap <leader>mm :BookmarkToggle<cr>
"nmap <leader>mn :BookmarkNext<cr>
"nmap <leader>mb :BookmarkPrev<cr>
nmap <Leader>mm <Plug>BookmarkToggle
"nmap <Leader>i <Plug>BookmarkAnnotate
nmap <Leader>ma <Plug>BookmarkShowAll
nmap <Leader>mn <Plug>BookmarkNext
nmap <Leader>mb <Plug>BookmarkPrev
nmap <Leader>mc <Plug>BookmarkClear
nmap <Leader>mx <Plug>BookmarkClearAll
let g:bookmarking_menu = 1

"}}}
"MatchTagAlways                                                                                                 Config {{{1
let g:mta_filetypes = {
      \ 'html'  : 1,
      \ 'xhtml' : 1,
      \ 'xml'   : 1,
      \ 'eruby' : 1,
      \ 'jinja' : 1
      \}
"}}}
"YankStack                                                                                                      Config {{{1
let g:yankstack_map_keys = 1
nmap <c-p> <Plug>yankstack_substitute_older_paste
nmap <c-o> <Plug>yankstack_substitute_newer_paste
imap <c-p> <Plug>yankstack_substitute_older_paste
imap <c-o> <Plug>yankstack_substitute_newer_paste
let g:yankstack_yank_keys = ['c', 'C', 'd', 'D',  'x', 'X', 'y', 'Y']
"}}}
"NERDTree                                                                                                       Config {{{1
" my settings
map <c-tab> :NERDTreeToggle<cr>
let g:indent_guides_exclude_filetypes = ['nerdtree'] "fixes the folding issue on NERDTree
let NERDTreeShowBookmarks=1
let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1

map <silent> <leader><tab>  :call RcsyncTree()<cr><space>
map <silent> <leader><leader><tab> <nop>
"map <leader>r :NERDTreeFind<cr>
"allows NERDTree to change de cur dir
let g:NERDTreeChDirMode=2
"" returns true iff is NERDTree open/active
function! RcisNTOpen()
  return exists("t:NERDTreeBufName")
endfunction

"when the buffer is nerdtree <tab> closes it
"autocmd FileType nerdtree noremap <tab> :NERDTreeClose<cr>

"calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! RcsyncTree()
  if RcisNTOpen() == 0 && !&modifiable
    NERDTre
  elseif &modifiable 
    NERDTree %:p:h
  else
    NERDTreeClose
  endif
endfunction
"}}}
" Fugitive                                                                                                       Config {{{1
" remove old fugitive buffers
autocmd bufreadpost fugitive://* set bufhidden=delete
let g:gitv_commitstep = 100
let g:gitv_openhorizontal = 0
highlight diffadded guifg=#00bf00
highlight diffremoved guifg=#bf0000
"fugitive mappings
nnoremap <leader>gs :Gstatus
nnoremap <leader>gc :Gcommit
nnoremap <leader>gd :Gdiff
nnoremap <leader>gb :Gblame
nnoremap <leader>gr :Gread
nnoremap <leader>gw :Gwrite
nnoremap <leader>gp :Gpush origin HEAD
nnoremap <leader>gu :Gpull
"}}}
"LustyExplorer                                                                                                  Config {{{1
noremap <leader>b :LustyBufferExplorer<cr>
let g:LustyExplorerSuppressRubyWarning = 1
let g:LustyJugglerShowKeys = 1
"}}}
"CtrlP                                                                                                          Config {{{1
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll|mp4|pdf|psd|plist)$',
      \ 'link': 'some_bad_symbolic_links',
      \ }

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_max_height= 15
let g:ctrlp_extensions = ['funky']

"if has('gui_macvim')
  "let g:ctrlp_map = '<D-p>'
"else
  "let g:ctrlp_map ='π'
"endif

  let g:ctrlp_map = '<leader>p'
"}}}
"CtrlPCmdPalette                                                                                                Config {{{1
noremap <D-P> :CtrlPMRUFiles <cr>
noremap <leader>mr :CtrlPMRUFiles<cr>
noremap <D-π> :CtrlPFunky <cr>
"}}}
"Syntastic                                                                                                      Config {{{1
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': ['ruby', 'php', 'javascript'],
      \ 'passive_filetypes': ['puppet', 'html'] }
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_always_populate_loc_list=1
let g:syntastic_html_tidy_ignore_errors = ['proprietary attribute "ng-controller ng-ini"']
let g:syntastic_javascript_checkers = ['jscs','jshint']

let g:syntastic_javascript_jshint_args=" --config ". g:configpath ."jshintrc"
"let g:syntastic_debug=3
function! <SID>LocationPrevious()                       
  try                                                   
    lprev                                               
  catch /^Vim\%((\a\+)\)\=:E553/                        
    llast                                               
  endtry                                                
endfunction                                             

function! <SID>LocationNext()                           
  try                                                   
    lnext                                               
  catch /^Vim\%((\a\+)\)\=:E553/                        
    lfirst                                              
  endtry                                                
endfunction                                             

nnoremap <silent> <Plug>LocationPrevious    :<C-u>exe 'call <SID>LocationPrevious()'<CR>                                        
nnoremap <silent> <Plug>LocationNext        :<C-u>exe 'call <SID>LocationNext()'<CR>
nmap <silent> [[  <Plug>LocationPrevious              
nmap <silent> ]]  <Plug>LocationNext
"}}}
"SplitJoin                                                                                                      Config {{{1
noremap <space>k :SplitjoinJoin <cr>
noremap <space>j :SplitjoinSplit <cr>
"}}}
"UltiSnips                                                                                                      Config {{{1
"Oh man.. totally amazing this thing!
"set runtimepat+=g:configpath."vim/ultisnips_rep"
let g:UltiSnipsUsePythonVersion = 2
let g:UltiSnipsSnippetsDir = g:configpath."vim/UltiSnips"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"let g:UltiSnipsDoHash=0

"mapping to allow snippet edition on the fly
noremap  <D-Bslash> :UltiSnipsEdit<cr>
"noremap   <D-Bar> :UltiSnipsAddFiletypes
"workaround with youCompleteMe
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-e>"
"}}}
"LightLine                                                                                                      Config {{{1

let g:lightline = {
      \ 'colorscheme': 'default',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [  'syntastic', 'lineinfo', 'vln' ], ['yolow'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"⭤":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())',
      \   'yolow': '&filetype!="help"',
      \ },
      \ 'separator': { 'left': '⮀', 'right': '' },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'yolow': 'Yolow',
      \   'vln': 'VisualLnumbers',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }

function! Yolow()
  return noscrollbar#statusline(10,' ','▍')
endfunction
function! VisualLnumbers()
  return line("'>") - line("'<") + 1
endfunction

function! MyModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! MyFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
      \ 'main': 'CtrlPStatusFunc_1',
      \ 'prog': 'CtrlPStatusFunc_2',
      \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
  let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0
"}}}

"Switch                                                                                                         Config {{{1
nnoremap - :Switch<cr>
let g:switch_custom_definitions =
      \ [
      \   ['addClass', "removeClass"],
      \   ['GET', 'POST'] ,
      \   ['get', 'post'] ,
      \   ['left', 'right', 'center'] ,
      \   ['width', 'height'] ,
      \   ['error', 'success', 'warning'] ,
      \   ['show', 'hide'] ,
      \   ['after', 'before'] ,
      \   ['padding', 'margin'] ,
      \   ['top', 'bottom'] ,
      \   ['relative', 'absolute', 'fixed'] ,
      \   ['setTimeout', '$timeout', 'setInterval'] ,
      \   ['$scope', '$rootScope'],
      \   ['$emit', '$broadcast'],
      \   ['console.log', 'alert'],
      \   ['radio', 'checkbox'],
      \   ['min', 'max'],
      \   ['unshift', 'push'],
      \   {
      \     '"\(\k\+\)"':                '''\1''',
      \     '''\(\k\+\)''':              '"\1"\2',
      \   }
      \ ]

"}}}
""EasyMotion                                                                                                     Config {{{1
"let g:EasyMotion_mapping_w  = '<space>w'
"let g:EasyMotion_mapping_W  = '<space>W'
"let g:EasyMotion_mapping_b  = '<space>b'
"let g:EasyMotion_mapping_B  = '<space>B'
"let g:EasyMotion_mapping_e  = '<space>e'
"let g:EasyMotion_mapping_E  = '<space>E'
"let g:EasyMotion_mapping_ge = '<space>ge'
"let g:EasyMotion_mapping_gE = '<space>gE'
"let g:EasyMotion_mapping_t  = '<space>t'
"let g:EasyMotion_mapping_T  = '<space>T'
"let g:EasyMotion_mapping_f  = '<space>f'
"let g:EasyMotion_mapping_F  = '<space>F'



"" change the default EasyMotion shading to something more readable with Solarized
"hi link EasyMotionTarget ErrorMsg
"hi link EasyMotionShade  Comment

"}}}
"Align                                                                                                     Config {{{1
if exists(":Align")
  map <Leader>t :Align 
  map <Leader>a :Align 
endif
"}}}

nnoremap <leader>vi :call LoadingMsg('Installing plugins...')<cr>:so $MYVIMRC<CR>:PlugInstall<CR>
nnoremap <leader>vu :call LoadingMsg("Updating plugins...")<cr>:so $MYVIMRC<CR>:PlugUpdate
nnoremap <leader>vc :call LoadingMsg("Cleaning plugins...")<cr>:so $MYVIMRC<CR>:PlugClean<cr>



let g:used_javascript_libs = 'underscore,jquery,angularjs,flux,react'

" vim: ts=2 fdm=marker fdl=0 ft=vim
