
" VUNDLE {{{

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')



"Colorthemes {{{
Bundle 'biskark/vim-ultimate-colorscheme-utility'
"colorscheme manager f11 & f12
Bundle 'chilicuil/nextCS'
Bundle 'jojoyuji/gruvbox'
"Bundle 'morhetz/gruvbox'
Bundle 'w0ng/vim-hybrid'
Bundle 'tomasr/molokai'
Bundle 'matthewtodd/vim-twilight'
Bundle 'reedes/vim-colors-pencil'
Bundle 'sk1418/last256'
Bundle 'jpo/vim-railscasts-theme'

"colorthemes
nnoremap  <d-1> :colorscheme gruvbox<cr>:echo 'gruvbox'<cr>
nnoremap  <d-2> :colorscheme nerv-ous<cr>
nnoremap  <d-3> :colorscheme molokai<cr>
nnoremap  <d-4> :colorscheme solarized<cr>
nnoremap  <d-5> :colorscheme twilight<cr>
nnoremap  <d-6> :colorscheme badwolf<cr>
nnoremap  <d-7> :colorscheme harlequin<cr>
nnoremap  <d-8> :colorscheme muzzl<cr>
nnoremap  <d-9> :colorscheme zmrok<cr>


"}}}
"Movements{{{
Bundle 'tpope/vim-surround'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rhysd/clever-f.vim'
"}}}
"Navigation{{{
Bundle 'kien/ctrlp.vim'
Bundle 'LustyExplorer'
Bundle 'nerdtree-execute'
Bundle 'mileszs/ack.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'tyok/nerdtree-ack'
Bundle 'markgandolfo/nerdtree-wget.vim'
Bundle 'dterei/VimBookmarking'
"Bundle 'majutsushi/tagbar'
"}}}
"Git stuff {{{
"Bundle 'mattn/gist-vim'
Bundle 'tpope/vim-fugitive'
"Bundle 'airblade/vim-gitgutter'
"}}}
"Indentation {{{
Bundle 'vim-scripts/Align'
Bundle 'Stormherz/tablify'
Bundle 'bigfish/vim-js-beautify'
Bundle 'michalliu/sourcebeautify.vim'
Bundle 'Yggdroot/indentLine'
"Bundle 'jojoyuji/vim-web-indent'
Bundle 'leshill/vim-json'
"}}}
"SyntaxComplete{{{
Bundle 'scrooloose/syntastic'
Bundle 'othree/javascript-libraries-syntax.vim'
Bundle 'othree/yajs.vim'
Bundle 'evidens/vim-twig'
Bundle 'pangloss/vim-javascript'
Bundle 'tpope/vim-haml'
"Bundle 'swaroopch/vim-markdown-preview'
Bundle 'suan/vim-instant-markdown'
Bundle 'SyntaxComplete'
Bundle 'groenewege/vim-less'
Bundle 'othree/html5.vim'
"}}}
"Pairing {{{
Bundle 'jiangmiao/auto-pairs'
"}}}
"TextObjects{{{
Bundle 'kana/vim-textobj-user'
Bundle 'vim-indent-object'
Bundle 'textobj-comment'
Bundle 'hchbaw/textobj-motionmotion.vim'
Bundle 'jojoyuji/vim-textobj-brace'
Bundle  'argtextobj.vim'
Bundle 'kana/vim-textobj-lastpat'
Bundle 'beloglazov/vim-textobj-quotes'
"}}}
"Utilities{{{
"Bundle 'terryma/vim-multiple-cursors'
Bundle 'SirVer/ultisnips'
Bundle 'tommcdo/vim-exchange'
Bundle 'maxbrunsfeld/vim-yankstack'



Bundle 'Valloric/YouCompleteMe'
Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-repeat'
Bundle 'jojoyuji/vim-sparkup'
"Bundle 'Valloric/MatchTagAlways'
Bundle 'tpope/vim-abolish'
Bundle 'splitjoin.vim'
Bundle 'AndrewRadev/switch.vim'
Bundle 'henrik/vim-open-url'
Bundle 'vim-scripts/Gundo'
Bundle 'tpope/vim-unimpaired'
Bundle 'terryma/vim-expand-region'
Bundle 'fisadev/vim-ctrlp-cmdpalette'
Bundle 'tacahiroy/ctrlp-funky'
Bundle 'caglartoklu/launchassociated.vim'
Bundle 'lfilho/cosco.vim'
"Bundle 'tsaleh/vim-matchit'
Bundle 'FredKSchott/CoVim'
Bundle '29decibel/vim-stringify'
Bundle 'editorconfig/editorconfig-vim'
Bundle 'edkolev/tmuxline.vim'

Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
let g:gist_open_browser_after_post = 1
let g:gist_clip_command = 'pbcopy'


"}}}
"libs {{{
"Bundle 'L9'
"}}}
"useless stuff{{{
"Bundle 'koron/nyancat-vim'
"}}}
"keep vim beautiful{{{
"Bundle 'Lokaltog/powerline-fonts'
"Bundle 'bling/vim-airline'
Bundle  'itchyny/lightline.vim'

let g:lightline = {
      \ 'colorscheme': 'default',
      \ 'mode_map': { 'c': 'NORMAL' },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() : 
        \  &ft == 'unite' ? unite#get_status_string() : 
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? '⭠ '._ : ''
  endif
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
"}}}
"Filetype Plugin{{{
Bundle 'chrisbra/csv.vim'
"}}}
"}}}

call vundle#end()            " required
filetype plugin indent on    " required




"Bookmarking                                                                                                    Config {{{1
nmap <leader>mm :ToggleBookmark<cr>
nmap <leader>mn :NextBookmark<cr>
nmap <leader>mb :PreviousBookmark<cr>
let g:bookmarking_menu = 1

"}}}
"MatchTagAlways                                                                                                 Config {{{1
let g:mta_filetypes = {
      \ 'html'  : 1,
      \ 'xhtml' : 1,
      \ 'xml'   : 1,
      \ 'eruby' : 1,
      \ 'jinja' : 1
      \}
"}}}
"YankStack                                                                                                      Config {{{1
let g:yankstack_map_keys = 1
nmap <c-p> <Plug>yankstack_substitute_older_paste
nmap <c-o> <Plug>yankstack_substitute_newer_paste
imap <c-p> <Plug>yankstack_substitute_older_paste
imap <c-o> <Plug>yankstack_substitute_newer_paste
let g:yankstack_yank_keys = ['c', 'C', 'd', 'D',  'x', 'X', 'y', 'Y']
"}}}
"ZenCoding                                                                                                      Config {{{
let g:user_zen_settings = {
      \  'php' : {
      \    'extends' : 'html',
      \    'filters' : 'c',
      \  },
      \  'xml' : {
      \    'extends' : 'html',
      \  },
      \  'haml' : {
      \    'extends' : 'html',
      \  },
      \}
let g:user_zen_expandabbr_key = '<c-e>'
let g:user_zen_leader_key = '<c-e>'
let g:use_zen_complete_tag = 1
"}}}
"NERDTree                                                                                                       Config {{{1
" my settings
map <c-tab> :NERDTreeToggle<cr>
let g:indent_guides_exclude_filetypes = ['nerdtree'] "fixes the folding issue on NERDTree
let NERDTreeShowBookmarks=1
let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1

map <silent> <leader><leader><tab>  :call RcsyncTree()<cr><space>
"map <leader>r :NERDTreeFind<cr>
"allows NERDTree to change de cur dir
let g:NERDTreeChDirMode=2
"" returns true iff is NERDTree open/active
function! RcisNTOpen()
  return exists("t:NERDTreeBufName")
endfunction

"when the buffer is nerdtree <tab> closes it
"autocmd FileType nerdtree noremap <tab> :NERDTreeClose<cr>

"calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! RcsyncTree()
  if RcisNTOpen() == 0
    NERDTree
  elseif &modifiable
    NERDTree %:p:h
  else
    NERDTreeToggle
  endif
endfunction
"}}}
" Fugitive                                                                                                       Config {{{1
" remove old fugitive buffers
autocmd bufreadpost fugitive://* set bufhidden=delete
let g:gitv_commitstep = 100
let g:gitv_openhorizontal = 0
highlight diffadded guifg=#00bf00
highlight diffremoved guifg=#bf0000
"fugitive mappings
nnoremap <leader>gs :Gstatus
nnoremap <leader>gc :Gcommit
nnoremap <leader>gd :Gdiff
nnoremap <leader>gb :Gblame
nnoremap <leader>gr :Gread
nnoremap <leader>gw :Gwrite
nnoremap <leader>gp :Gpush
nnoremap <leader>gu :!git pull
"}}}
"LustyExplorer                                                                                                  Config {{{1
noremap <leader>b :LustyBufferExplorer<cr>
let g:LustyExplorerSuppressRubyWarning = 1
let g:LustyJugglerShowKeys = 1
"}}}
"CtrlP                                                                                                          Config {{{1
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll|mp4|pdf|psd|plist)$',
      \ 'link': 'some_bad_symbolic_links',
      \ }

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_max_height= 15
let g:ctrlp_extensions = ['funky']
if has('gui_macvim')
  let g:ctrlp_map = '<D-p>'
else
  let g:ctrlp_map ='π'
endif
"}}}
"CtrlPCmdPalette                                                                                                Config {{{1
noremap <D-P> :CtrlPMRUFiles <cr>
noremap <leader>mr :CtrlPMRUFiles<cr>
noremap <D-π> :CtrlPFunky <cr>
"}}}
"Syntastic                                                                                                      Config {{{1
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': ['ruby', 'php', 'javascript'],
      \ 'passive_filetypes': ['puppet', 'html'] }
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_always_populate_loc_list=1
let g:syntastic_html_tidy_ignore_errors = ['proprietary attribute "ng-controller ng-ini"']
let g:syntastic_javascript_checrers = ['jshint']
let g:syntastic_javascript_jshint_args=" --config ". g:configpath ."jshintrc"
"}}}
"SplitJoin                                                                                                      Config {{{1
noremap <space>k :SplitjoinJoin <cr>
noremap <space>j :SplitjoinSplit <cr>
"}}}
"UltiSnips                                                                                                      Config {{{1
"Oh man.. totally amazing this thing!
"set runtimepat+=g:configpath."vim/ultisnips_rep"
let g:UltiSnipsUsePythonVersion = 2
let g:UltiSnipsSnippetsDir = g:configpath."vim/UltiSnips"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"let g:UltiSnipsDoHash=0

"mapping to allow snippet edition on the fly
noremap  <D-Bslash> :UltiSnipsEdit<cr>
"noremap   <D-Bar> :UltiSnipsAddFiletypes
"workaround with youCompleteMe
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-e>"
"}}}

"Switch                                                                                                         Config {{{1
nnoremap - :Switch<cr>
let g:switch_custom_definitions =
      \ [
      \   ['addClass', 'removeClass'],
      \   ['GET', 'POST'] ,
      \   ['get', 'post'] ,
      \   ['left', 'right', 'center'] ,
      \   ['width', 'height'] ,
      \   ['error', 'success', 'warning'] ,
      \   ['show', 'hide'] ,
      \   ['after', 'before'] ,
      \   ['padding', 'margin'] ,
      \   ['top', 'bottom'] ,
      \   ['relative', 'absolute', 'fixed'] ,
      \   ['setTimeout', '$timeout', 'setInterval'] ,
      \   ['$scope', '$rootScope'],
      \   ['$emit', '$broadcast'],
      \   ['console.log', 'alert'],
      \   ['radio', 'checkbox'],
      \   ['push', 'unshift']
      \ ]
"}}}
"EasyMotion                                                                                                     Config {{{1
let g:EasyMotion_mapping_w = '<space>w'
let g:EasyMotion_mapping_W = '<space>W'
let g:EasyMotion_mapping_b = '<space>b'
let g:EasyMotion_mapping_B = '<space>B'
let g:EasyMotion_mapping_e = '<space>e'
let g:EasyMotion_mapping_E = '<space>E'
let g:EasyMotion_mapping_ge = '<space>ge'
let g:EasyMotion_mapping_gE = '<space>gE'
let g:EasyMotion_mapping_t = '<space>t'
let g:EasyMotion_mapping_T = '<space>T'
let g:EasyMotion_mapping_f = '<space>f'
let g:EasyMotion_mapping_F = '<space>F'

" change the default EasyMotion shading to something more readable with Solarized
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

"}}}
"Align                                                                                                          Config {{{1

noremap <leader>t :Align
vmap <leader>t :Align
"}}}


nnoremap <leader>vi :call LoadingMsg('Installing Vundle plugins...')<cr>:so $MYVIMRC<CR>:BundleInstall<CR>
nnoremap <leader>vu :call LoadingMsg("Updating Vundle plugins...")<cr>:so $MYVIMRC<CR>:BundleUpdate
nnoremap <leader>vc :call LoadingMsg("Cleaning Vundle plugins...")<cr>:so $MYVIMRC<CR>:BundleClean<cr>




" vim: ts=2 fdm=marker fdl=0 ft=vim
