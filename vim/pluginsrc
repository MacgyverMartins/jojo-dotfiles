
" VUNDLE {{{

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
Plugin 'gmarik/Vundle.vim'



"Colorthemes {{{
Plugin 'biskark/vim-ultimate-colorscheme-utility'
"colorscheme manager f11 & f12
Plugin 'chilicuil/nextCS'
Plugin 'jojoyuji/gruvbox'
Plugin 'w0ng/vim-hybrid'
Plugin 'tomasr/molokai'
Plugin 'matthewtodd/vim-twilight'
Plugin 'reedes/vim-colors-pencil'
Plugin 'sk1418/last256'
Plugin 'jpo/vim-railscasts-theme'
Plugin 'chriskempson/base16-vim'
Plugin 'whatyouhide/vim-gotham'

"colorthemes
nnoremap  <d-1> :colorscheme gruvbox<cr>:echo 'gruvbox'<cr>
nnoremap  <d-2> :colorscheme nerv-ous<cr>
nnoremap  <d-3> :colorscheme molokai<cr>
nnoremap  <d-4> :colorscheme solarized<cr>
nnoremap  <d-5> :colorscheme twilight<cr>
nnoremap  <d-6> :colorscheme badwolf<cr>
nnoremap  <d-7> :colorscheme harlequin<cr>
nnoremap  <d-8> :colorscheme muzzl<cr>
nnoremap  <d-9> :colorscheme zmrok<cr>


"}}}
"Movements{{{
Plugin 'tpope/vim-surround'
Plugin 'rhysd/clever-f.vim'
"}}}
"Navigation{{{
Plugin 'kien/ctrlp.vim'
Plugin 'LustyExplorer'
Plugin 'nerdtree-execute'
Plugin 'mileszs/ack.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tyok/nerdtree-ack'
Plugin 'markgandolfo/nerdtree-wget.vim'
Plugin 'dterei/VimBookmarking'
"Plugin 'myusuf3/numbers.vim'
"Plugin 'majutsushi/tagbar'
"}}}
"Git stuff {{{
"Plugin 'mattn/gist-vim'
Plugin 'tpope/vim-fugitive'
"Plugin 'airblade/vim-gitgutter'
"}}}
"Indentation {{{
Plugin 'vim-scripts/Align'
Plugin 'bigfish/vim-js-beautify'
"Plugin 'michalliu/sourcebeautify.vim'
"Plugin 'lukaszb/vim-web-indent'
"Plugin 'cawinkelmann/vim-web-indent'
Plugin 'itspriddle/vim-javascript-indent'
Plugin 'Yggdroot/indentLine'
Plugin 'leshill/vim-json'
"}}}
"SyntaxComplete{{{
Plugin 'scrooloose/syntastic'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'othree/yajs.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'evidens/vim-twig'
Plugin 'tpope/vim-haml'
Plugin 'suan/vim-instant-markdown'
Plugin 'SyntaxComplete'
Plugin 'groenewege/vim-less'
Plugin 'othree/html5.vim'
Plugin 'mustache/vim-mustache-handlebars'
"}}}
"Pairing {{{
"Plugin 'jiangmiao/auto-pairs'
Plugin 'Raimondi/delimitMate'
"}}}

"TextObjects{{{
Plugin 'kana/vim-textobj-user'
Plugin 'vim-indent-object'
Plugin 'textobj-comment'
Plugin 'hchbaw/textobj-motionmotion.vim'
Plugin 'jojoyuji/vim-textobj-brace'
Plugin  'argtextobj.vim'
Plugin 'kana/vim-textobj-lastpat'
Plugin 'beloglazov/vim-textobj-quotes'
"}}}
"Utilities{{{
"Plugin 'terryma/vim-multiple-cursors'
Plugin 'SirVer/ultisnips'
Plugin 'tommcdo/vim-exchange'
Plugin 'maxbrunsfeld/vim-yankstack'

Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-repeat'
Plugin 'jojoyuji/vim-sparkup'
Plugin 'tpope/vim-abolish'
Plugin 'splitjoin.vim'
Plugin 'AndrewRadev/switch.vim'
Plugin 'henrik/vim-open-url'
Plugin 'vim-scripts/Gundo'
Plugin 'tpope/vim-unimpaired'
Plugin 'terryma/vim-expand-region'
Plugin 'fisadev/vim-ctrlp-cmdpalette'
Plugin 'tacahiroy/ctrlp-funky'
Plugin 'caglartoklu/launchassociated.vim'
Plugin '29decibel/vim-stringify'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'edkolev/tmuxline.vim'
Plugin 'vim-scripts/matchit.zip'

Plugin 'mattn/webapi-vim'
Plugin 'mattn/gist-vim'

let g:gist_open_browser_after_post = 1
let g:gist_clip_command = 'pbcopy'


"}}}
"useless stuff{{{
"}}}
"keep vim beautiful{{{
Plugin  'itchyny/lightline.vim'
"}}}
"Filetype Plugin{{{
Plugin 'chrisbra/csv.vim'
"}}}
"}}}

call vundle#end()            " required
filetype plugin indent on    " required




"Bookmarking                                                                                                    Config {{{1
nmap <leader>mm :ToggleBookmark<cr>
nmap <leader>mn :NextBookmark<cr>
nmap <leader>mb :PreviousBookmark<cr>
let g:bookmarking_menu = 1

"}}}
"MatchTagAlways                                                                                                 Config {{{1
let g:mta_filetypes = {
      \ 'html'  : 1,
      \ 'xhtml' : 1,
      \ 'xml'   : 1,
      \ 'eruby' : 1,
      \ 'jinja' : 1
      \}
"}}}
"YankStack                                                                                                      Config {{{1
let g:yankstack_map_keys = 1
nmap <c-p> <Plug>yankstack_substitute_older_paste
nmap <c-o> <Plug>yankstack_substitute_newer_paste
imap <c-p> <Plug>yankstack_substitute_older_paste
imap <c-o> <Plug>yankstack_substitute_newer_paste
let g:yankstack_yank_keys = ['c', 'C', 'd', 'D',  'x', 'X', 'y', 'Y']
"}}}
"NERDTree                                                                                                       Config {{{1
" my settings
map <c-tab> :NERDTreeToggle<cr>
let g:indent_guides_exclude_filetypes = ['nerdtree'] "fixes the folding issue on NERDTree
let NERDTreeShowBookmarks=1
let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1

map <silent> <leader><leader><tab>  :call RcsyncTree()<cr><space>
"map <leader>r :NERDTreeFind<cr>
"allows NERDTree to change de cur dir
let g:NERDTreeChDirMode=2
"" returns true iff is NERDTree open/active
function! RcisNTOpen()
  return exists("t:NERDTreeBufName")
endfunction

"when the buffer is nerdtree <tab> closes it
"autocmd FileType nerdtree noremap <tab> :NERDTreeClose<cr>

"calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! RcsyncTree()
  if RcisNTOpen() == 0 && !&modifiable
    NERDTre
  elseif &modifiable 
    NERDTree %:p:h
  else
    NERDTreeClose
  endif
endfunction
  "}}}
" Fugitive                                                                                                       Config {{{1
" remove old fugitive buffers
autocmd bufreadpost fugitive://* set bufhidden=delete
let g:gitv_commitstep = 100
let g:gitv_openhorizontal = 0
highlight diffadded guifg=#00bf00
highlight diffremoved guifg=#bf0000
"fugitive mappings
nnoremap <leader>gs :Gstatus
nnoremap <leader>gc :Gcommit
nnoremap <leader>gd :Gdiff
nnoremap <leader>gb :Gblame
nnoremap <leader>gr :Gread
nnoremap <leader>gw :Gwrite
nnoremap <leader>gp :Gpush
nnoremap <leader>gu :!git pull
"}}}
"LustyExplorer                                                                                                  Config {{{1
noremap <leader>b :LustyBufferExplorer<cr>
let g:LustyExplorerSuppressRubyWarning = 1
let g:LustyJugglerShowKeys = 1
"}}}
"CtrlP                                                                                                          Config {{{1
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll|mp4|pdf|psd|plist)$',
      \ 'link': 'some_bad_symbolic_links',
      \ }

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_max_height= 15
let g:ctrlp_extensions = ['funky']
if has('gui_macvim')
  let g:ctrlp_map = '<D-p>'
else
  let g:ctrlp_map ='π'
endif
"}}}
"CtrlPCmdPalette                                                                                                Config {{{1
noremap <D-P> :CtrlPMRUFiles <cr>
noremap <leader>mr :CtrlPMRUFiles<cr>
noremap <D-π> :CtrlPFunky <cr>
"}}}
"Syntastic                                                                                                      Config {{{1
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': ['ruby', 'php', 'javascript'],
      \ 'passive_filetypes': ['puppet', 'html'] }
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_always_populate_loc_list=1
let g:syntastic_html_tidy_ignore_errors = ['proprietary attribute "ng-controller ng-ini"']
let g:syntastic_javascript_checrers = ['jshint']
let g:syntastic_javascript_jshint_args=" --config ". g:configpath ."jshintrc"
function! <SID>LocationPrevious()                       
  try                                                   
    lprev                                               
  catch /^Vim\%((\a\+)\)\=:E553/                        
    llast                                               
  endtry                                                
endfunction                                             

function! <SID>LocationNext()                           
  try                                                   
    lnext                                               
  catch /^Vim\%((\a\+)\)\=:E553/                        
    lfirst                                              
  endtry                                                
endfunction                                             

nnoremap <silent> <Plug>LocationPrevious    :<C-u>exe 'call <SID>LocationPrevious()'<CR>                                        
nnoremap <silent> <Plug>LocationNext        :<C-u>exe 'call <SID>LocationNext()'<CR>
nmap <silent> [[  <Plug>LocationPrevious              
nmap <silent> ]]  <Plug>LocationNext
"}}}
"SplitJoin                                                                                                      Config {{{1
noremap <space>k :SplitjoinJoin <cr>
noremap <space>j :SplitjoinSplit <cr>
"}}}
"UltiSnips                                                                                                      Config {{{1
"Oh man.. totally amazing this thing!
"set runtimepat+=g:configpath."vim/ultisnips_rep"
let g:UltiSnipsUsePythonVersion = 2
let g:UltiSnipsSnippetsDir = g:configpath."vim/UltiSnips"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"let g:UltiSnipsDoHash=0

"mapping to allow snippet edition on the fly
noremap  <D-Bslash> :UltiSnipsEdit<cr>
"noremap   <D-Bar> :UltiSnipsAddFiletypes
"workaround with youCompleteMe
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-e>"
"}}}
"LightLine                                                                                                      Config {{{1

let g:lightline = {
      \ 'colorscheme': 'default',
      \ 'mode_map': { 'c': 'NORMAL' },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() : 
        \  &ft == 'unite' ? unite#get_status_string() : 
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? '⭠ '._ : ''
  endif
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
"}}}

"Switch                                                                                                         Config {{{1
nnoremap - :Switch<cr>
let g:switch_custom_definitions =
      \ [
      \   ['addClass', 'removeClass'],
      \   ['GET', 'POST'] ,
      \   ['get', 'post'] ,
      \   ['left', 'right', 'center'] ,
      \   ['width', 'height'] ,
      \   ['error', 'success', 'warning'] ,
      \   ['show', 'hide'] ,
      \   ['after', 'before'] ,
      \   ['padding', 'margin'] ,
      \   ['top', 'bottom'] ,
      \   ['relative', 'absolute', 'fixed'] ,
      \   ['setTimeout', '$timeout', 'setInterval'] ,
      \   ['$scope', '$rootScope'],
      \   ['$emit', '$broadcast'],
      \   ['console.log', 'alert'],
      \   ['radio', 'checkbox'],
      \   ['push', 'unshift']
      \ ]
"}}}
""EasyMotion                                                                                                     Config {{{1
"let g:EasyMotion_mapping_w  = '<space>w'
"let g:EasyMotion_mapping_W  = '<space>W'
"let g:EasyMotion_mapping_b  = '<space>b'
"let g:EasyMotion_mapping_B  = '<space>B'
"let g:EasyMotion_mapping_e  = '<space>e'
"let g:EasyMotion_mapping_E  = '<space>E'
"let g:EasyMotion_mapping_ge = '<space>ge'
"let g:EasyMotion_mapping_gE = '<space>gE'
"let g:EasyMotion_mapping_t  = '<space>t'
"let g:EasyMotion_mapping_T  = '<space>T'
"let g:EasyMotion_mapping_f  = '<space>f'
"let g:EasyMotion_mapping_F  = '<space>F'



"" change the default EasyMotion shading to something more readable with Solarized
"hi link EasyMotionTarget ErrorMsg
"hi link EasyMotionShade  Comment

"}}}
"Align                                                                                                     Config {{{1
if exists(":Align")
  map <Leader>t :Align 
endif
"}}}


nnoremap <leader>vi :call LoadingMsg('Installing Vundle plugins...')<cr>:so $MYVIMRC<CR>:PluginInstall<CR>
nnoremap <leader>vu :call LoadingMsg("Updating Vundle plugins...")<cr>:so $MYVIMRC<CR>:PluginUpdate
nnoremap <leader>vc :call LoadingMsg("Cleaning Vundle plugins...")<cr>:so $MYVIMRC<CR>:PluginClean<cr>





" vim: ts=2 fdm=marker fdl=0 ft=vim
